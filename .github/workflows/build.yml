name: Build & test node-ffmpeg

on:
  workflow_call:
    inputs:
      platform:
        type: string
        required: true
      debug:
        type: boolean
        default: false
        description: Debug build
      codecov:
        type: boolean
        default: false
        description: codecov build
      asan:
        type: boolean
        default: false
        description: ASAN build
      publish:
        type: boolean
        default: false
        description: publish the binaries to the current release


jobs:
  build:
    name: Build & test on ${{ inputs.platform }}
    runs-on: ${{ inputs.platform }}

    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
        submodules: true
    - name: Use Node.js 18
      uses: actions/setup-node@v4
      with:
        node-version: 18
    - uses: actions/setup-python@v5
      with:
        python-version: "3.11"
    - name: (if on Ubuntu 20.04) switch to g++ 10
      run: |
        echo CC=gcc-10 >> $GITHUB_ENV
        echo CXX=g++-10 >> $GITHUB_ENV
      if: inputs.platform == 'ubuntu-20.04'
    - name: (if on Ubuntu) install fonts
      run: sudo apt-get install -y fonts-ubuntu || true
      if: ${{ contains(inputs.platform, 'ubuntu') }}
    - run: npm install --ignore-scripts --production
    - run: npm install typescript
    - run: npx xpm install

    - name: Get conan home
      shell: bash
      id: conan_home
      run: |
        npx xpm run -q conan -- version
        echo path=`npx xpm run -q conan -- config home` >> $GITHUB_OUTPUT
    - name: Cache conan artifacts
      id: conan-artifacts
      uses: actions/cache@v4
      with:
        path: ${{ steps.conan_home.outputs.path }}
        key: conan-${{ inputs.platform }}-${{ inputs.debug && 'Debug' || 'Release' }}${{ inputs.codecov && 'codecov' || '' }}${{ inputs.asan && 'asan' || '' }}

    - run: npx xpm run prepare --config ${{ inputs.debug && 'Debug' || 'Release' }}
      env:
        PKG_CONFIG_PATH:

    - run: npx xpm run configure -- -Db_sanitize=address
      if: inputs.asan
    - run: npx xpm run configure -- -Db_coverage=true -Dbuildtype=debugoptimized '-Dcpp_args="--coverage -ftest-coverage"'
      if: inputs.codecov

    - run: npx xpm run build --config ${{ inputs.debug && 'Debug' || 'Release' }}

    - run: npm install
    - run: npm test
      if: (!inputs.asan) && (inputs.codecov)

    - name: (ASAN)
      run: echo LD_PRELOAD=$(gcc -print-file-name=libasan.so) >> $GITHUB_ENV
      if: inputs.asan
    - name: (ASAN)
      run: node node_modules/mocha/lib/cli/cli.js
      if: inputs.asan
      env:
        LSAN_OPTIONS: suppressions=${{ github.workspace }}/test/napi-leaks-suppression.txt

    - name: (codecov)
      run: |
        npx c8 npm test
        mkdir -p coverage && cd coverage && gcov -o ../build/Debug/obj.target/ffmpeg/src/binding ../src/binding/*
        npx c8 report --reporter=text-lcov > coverage/tests.lcov
      if: inputs.codecov

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v5
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        directory: ${{ github.workspace }}/coverage
